import re
import argparse
import json

def sanitize_log(input_file, output_file, mapping_file, mode):
    # Define patterns for sensitive information
    hostname_pattern = re.compile(r'(hostname\s*=\s*)(\S+)')
    ip_pattern = re.compile(r'(\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b)')
    version_pattern = re.compile(r'(version\s*=\s*)(\S+)')

    mapping = {
    "server.example.com": "#########",
    "192.168.1.10": "*.*.*.*",

    "v5.4.2": "x.y.z"
    }# To store the mapping of original to sanitized values

    if mode == 'sanitize':
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                # Replace sensitive information
                line = hostname_pattern.sub(r'\1#########', line)
                line = ip_pattern.sub(r'*.*.*.*', line)
                line = version_pattern.sub(r'\1x.y.z', line)
                outfile.write(line)
                # Generate mapping
                for match in hostname_pattern.finditer(line):
                    mapping[match.group(2)] = '#########'
                for match in ip_pattern.finditer(line):
                    mapping[match.group()] = '*.*.*.*'
                for match in version_pattern.finditer(line):
                    mapping[match.group(2)] = 'x.y.z'
        # Write mapping to file
        with open(mapping_file, 'w') as mapfile:
            json.dump(mapping, mapfile)

    elif mode == 'desanitize':
        with open(mapping_file, 'r') as mapfile:
            mapping = json.load(mapfile)
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                # Desanitize using mapping
                for original, sanitized in mapping.items():
                    line = line.replace(sanitized, original)
                outfile.write(line)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Sanitize or desanitize log files')
    parser.add_argument('-in', dest='input_file', required=True, help='Input log file')
    parser.add_argument('-out', dest='output_file', required=True, help='Output file')
    parser.add_argument('-map', dest='mapping_file', required=True, help='Mapping file')
    parser.add_argument('-mode', dest='mode', choices=['sanitize', 'desanitize'], required=True,
                        help='Mode: "sanitize" to replace sensitive information, "desanitize" to restore original')
    args = parser.parse_args()

    sanitize_log(args.input_file, args.output_file, args.mapping_file, args.mode)
