import re
import argparse
import json
import hashlib

def hash_placeholder(data):
    """Generate a unique placeholder for sensitive data."""
    return hashlib.sha1(data.encode()).hexdigest()[:20]

def sanitize_log(input_file, output_file, mapping_file, mode):
    # Define patterns for sensitive information
    ip_pattern = re.compile(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b')
    hostname_pattern = re.compile(r'\b(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,6}\b')
    #version_pattern = re.compile(r'\bversion\s*=\s*(\S+)')

    mapping = {}  # To store the mapping of original to sanitized values

    if mode == 'sanitize':
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                # Replace sensitive information
                for match in hostname_pattern.findall(line):
                    if match not in mapping:
                        mapping[match] = ' '+ hash_placeholder(match)
                    line = line.replace(match, mapping[match])

                for match in ip_pattern.findall(line):
                    if match not in mapping:
                        mapping[match] = '' + hash_placeholder(match)
                    line = line.replace(match, mapping[match])

                #for match in version_pattern.findall(line):
                 #   if match not in mapping:
                  #      mapping[match] = '' + hash_placeholder(match)
                   # line = line.replace(match, mapping[match])

                outfile.write(line)

        # Write mapping to file
        with open(mapping_file, 'w') as mapfile:
            json.dump(mapping, mapfile)

    elif mode == 'desanitize':
        with open(mapping_file, 'r') as mapfile:
            mapping = json.load(mapfile)
        reverse_mapping = {v: k for k, v in mapping.items()}
        with open(input_file, 'r') as infile, open(output_file, 'w') as outfile:
            for line in infile:
                # Desanitize using mapping
                for sanitized, original in reverse_mapping.items():
                    line = line.replace(sanitized, original)
                outfile.write(line)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Sanitize or desanitize log files')
    parser.add_argument('-in', dest='input_file', required=True, help='Input log file')
    parser.add_argument('-out', dest='output_file', required=True, help='Output file')
    parser.add_argument('-map', dest='mapping_file', required=True, help='Mapping file')
    parser.add_argument('-mode', dest='mode', choices=['sanitize', 'desanitize'], required=True,
                        help='Mode: "sanitize" to replace sensitive information, "desanitize" to restore original')
    args = parser.parse_args()

    sanitize_log(args.input_file, args.output_file, args.mapping_file, args.mode)
